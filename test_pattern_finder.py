import unittest
import glob
import timeit
from find_reg_ex import find

class PatternFinderTest(unittest.TestCase):
	def setUp(self):
		self.files = glob.glob('input/*.html')

	def test_escaped_characters(self):
		pattern = 'class="hs-featured-image-link">\\\\n'
		ids = find(pattern, self.files)
		self.assertCountEqual(ids, ['8689777951', '8689784181', '8689782501', '8735757831', '8689817761', '8689771651', '8689867571', '8830391361', '8887672971', '9131534371', '8938797101', '9792103001', '9792112911', '9792118181', '9792106691', '9792117671', '9792117991', '9792163411', '9792142821', '9792164011', '9792170381', '8689778768', '8689876738', '8718637628', '8689784058', '8718668088', '8689814798', '8807903968', '9577982058', '9515954888', '9768517678', '9792105378', '9792107988', '9792108908', '9792110258', '9792110838', '9792117318', '9792121078', '9792145548', '9792147428', '9792130368', '9792162808', '9792166908', '8689782960', '8718639810', '8718634670', '8689802720', '8718701550', '8726431680', '8689825430', '8689776840', '8689782350', '8703002370', '8718734740', '8689771490', '8689782000', '8966537150', '8774696770', '8801126980', '8914265880', '9792097420', '9792101810', '9792111030', '9792110600', '9792115560', '9792135280', '9792125940', '9792166280', '9792166720', '9792167810', '9792169720', '8718634193', '8689840663', '8718698473', '9578049003', '9462848903', '9792104743', '9792108533', '9792114713', '9792115413', '9792117843', '9792123523', '9792126383', '9792146803', '9792146943', '9792163703', '8689803959', '8718637159', '8689857589', '8689775959', '8718734909', '8718710029', '8689777239', '9792106329', '9419490539', '9792104959', '9792108399', '9792103369', '9792112099', '9792123389', '9792137009', '9792167659', '9792163249', '9792164229', '9792165739', '8689783115', '8689761255', '8689782735', '8726432355', '8689782215', '8689779075', '8689776375', '8689782615', '8689777615', '9620941865', '9131919555', '9792108685', '9792115115', '9792145415', '9792136095', '9792167475', '9792170165', '8718668756', '8689814276', '8718634406', '8718735246', '9150898406', '9462820686', '9792119496', '9792102826', '9792121906', '9792167086', '9792170566', '8718636987', '8689777077', '8718730147', '8729874757', '9792116937', '9792119167', '9792122557', '9792131747', '9792167287', '9792169917', '9792170787', '8689781882', '8718639972', '8718729442', '8689881672', '8689837712', '8718734392', '8801176372', '8857919752', '9792097882', '9792099822', '9792108192', '9792089872', '9792117142', '9792117442', '9792118792', '9792163002', '9792163112', '9792162582', '8702980224', '8718659914', '8718647134', '8718690354', '8689778444', '8689777474', '8689782104', '8689814904', '8718633994', '8902100194', '8830442834', '8957770184', '9792105144', '9792112744', '9792118604', '9792107014', '9792166144', '9792129844', '9792163554', '9792139394', '9792165954', '9792166474'])
	
	def test_find_regex_with_numbers(self):
		pattern = 'Section \d+ Refresh'
		ids = find(pattern, self.files)
		self.assertCountEqual(ids, ['9028094287','9780103281'])

	def test_find_p_tags(self):
		pattern = '<p>(.*?)</p>'
		ids = find(pattern, self.files)
		self.assertCountEqual(ids, ['8689777951', '8689784181', '8689782501', '8718647451', '8735757831', '8689817761', '8689804271', '8689825741', '8689771651', '8689783921', '8689802291', '8590048741', '8729873411', '8689867571', '8752640921', '8830387041', '8873241071', '8830391361', '9028102941', '9028099691', '8844923131', '8887672971', '9131534371', '8938797101', '9620941211', '9780103281', '9792103001', '9792112911', '9792118181', '9792106691', '9792117671', '9792117991', '9792163411', '9792122991', '9792127051', '9792127281', '9792129971', '9792130721', '9792135961', '9792142821', '9792132201', '9792134721', '9792134861', '9792137291', '9792142541', '9792144991', '9792147301', '9792149521', '9792154921', '9792155701', '9792164011', '9792170381', '8689817648', '8590096008', '8689803198', '8689824528', '8689816218', '8689778768', '8718691978', '8718659558', '8689822898', '8589874338', '8689876738', '8718637628', '8689784058', '8718697878', '8718637338', '8718691088', '8718668088', '8689814798', '8726434168', '8985943358', '9028099348', '9028099198', '8887659818', '8764363338', '9419433938', '8807903968', '9577982058', '9515954888', '9768517678', '9792098068', '9792105378', '9792106488', '9792107988', '9792108908', '9792110258', '9792110838', '9792117318', '9792119358', '9792121078', '9792146108', '9792127158', '9792129698', '9792131938', '9792132068', '9792140318', '9792141018', '9792145548', '9792147428', '9792149918', '9792151708', '9792151838', '9792154518', '9792130368', '9792146668', '9792147828', '9792149658', '9792153748', '9792155198', '9792160178', '9792162808', '9792166908', '8689775800', '8689782960', '8689839080', '8692528280', '8689814130', '8689817980', '8718639810', '8689817870', '8718634670', '8689783550', '8689802720', '8718667810', '8718698880', '8718701550', '8689778120', '8726431680', '8689783680', '8689825430', '8589875070', '8689776840', '8689782350', '8689777790', '8703002370', '8718734740', '8718669020', '8718699280', '8689771490', '8726430590', '8689782000', '9792114980', '8966532580', '9028100480', '9028099030', '8966537150', '9277332530', '8774696770', '8801126980', '8914265880', '9568705600', '9655941980', '9792097420', '9792101810', '9792109060', '9792111030', '9792114850', '9792118460', '9792122430', '9768493270', '9792110600', '9792115560', '9792122860', '9792126540', '9792126920', '9792135280', '9792154660', '9792154790', '9792125940', '9792127920', '9792131470', '9792139110', '9792139720', '9792139870', '9792162400', '9792166280', '9792166720', '9792167810', '9792169720', '8689813283', '8689825073', '8689816453', '8718699163', '8718691523', '8718663903', '8718634193', '8735719503', '8692487803', '8689776513', '8692471263', '8689783783', '8689778603', '8689802503', '8590094513', '8702982393', '8689840663', '8718698473', '9792114373', '8785536823', '8807848553', '8954268493', '9028099743', '9028099793', '9028096493', '9028094623', '9089757343', '9089760913', '9028097193', '9028096323', '8830392283', '9760253963', '9561291483', '9578049003', '9462848903', '9792104743', '9792108533', '9792114713', '9792115413', '9792117843', '9792121443', '9792123523', '9792126253', '9792126383', '9792132593', '9792135823', '9792146803', '9792151443', '9792153423', '9792131603', '9792136413', '9792142393', '9792146943', '9792147693', '9792150733', '9792163703', '8689782839', '8689816109', '8692528039', '8689803959', '8689816989', '8718637159', '8718697459', '8718660159', '8689814679', '8718662809', '8689857589', '8689775959', '8692467149', '8718734909', '8689813069', '8718710029', '8689777239', '8817739739', '9025215899', '9028097049', '9028094089', '9131522019', '9462815049', '9792106329', '9028096709', '9577981539', '9419490539', '9780103539', '9792104959', '9792108399', '9792115279', '9792118319', '9792121279', '9792103369', '9792112099', '9792123389', '9792126669', '9792127669', '9792137009', '9792140039', '9792150599', '9792167659', '9792127409', '9792133019', '9792136269', '9792142259', '9792142959', '9792160039', '9792160629', '9792163249', '9792164229', '9792165739', '8689783115', '8689818095', '8689823125', '8692527785', '8692519565', '8689822655', '8718700905', '8689761255', '8689782735', '8689813405', '8718694615', '8726432355', '8689782215', '8689779075', '8689776375', '8689771595', '8689782615', '8692468295', '8689777615', '8718668505', '9028100535', '9028098875', '9028097905', '9028096155', '9028095395', '9121811175', '9146964695', '9028100875', '9462812025', '8938742605', '9620941865', '9131919555', '9792108685', '9792121605', '9792103605', '9792115115', '9792126125', '9792130185', '9792134585', '9792135145', '9792135555', '9792140485', '9792145415', '9792150925', '9792153585', '9792154095', '9792136095', '9792136715', '9792139255', '9792154385', '9792167475', '9792170165', '8689816566', '8689817536', '8692529646', '8718697756', '8718697306', '8718664026', '8718668896', '8718690636', '8718697136', '8689813666', '8718690786', '8589823186', '8718668756', '8718668226', '8689814276', '8718634406', '8689771356', '8718735246', '8762552456', '8857869826', '8944480926', '8904665526', '9028099906', '9028100696', '9028095226', '9028094796', '9089760576', '9028095986', '9150898406', '9028100806', '9568709936', '9462820686', '9792119496', '9536461446', '9709784576', '9792102826', '9792103816', '9792121906', '9792127796', '9792123256', '9792126796', '9792135006', '9792140176', '9792150876', '9792128196', '9792132726', '9792143236', '9792145126', '9792145276', '9792146526', '9792167086', '9792170566', '8689778917', '8689804727', '8689838237', '8708352067', '8689784337', '8689822297', '8718698597', '8718690947', '8718659677', '8718647007', '8718646887', '8718636987', '8718662927', '8739728027', '8689783417', '8689777077', '8718663777', '8689805157', '8718660037', '8718730147', '8729874757', '8817731517', '8892183907', '8914246467', '9028094967', '9028100427', '9028100927', '9028102497', '9028097387', '9028095097', '9028097737', '9477018117', '9568709867', '9792116937', '9028094287', '9792102007', '9792113047', '9792119167', '9792122557', '9792122727', '9792145817', '9792149787', '9792150467', '9792151167', '9792151307', '9792154247', '9792131747', '9792132877', '9792136567', '9792137147', '9792140757', '9792147167', '9792155057', '9792160327', '9792167287', '9792169917', '9792170787', '8689781882', '8689803682', '8689816672', '8689803452', '8689813902', '8718668632', '8718662692', '8718700662', '8718700542', '8718691832', '8718639972', '8718667222', '8739631532', '8718729442', '8689881672', '8689837712', '8718734392', '8689804472', '9112218012', '8753970152', '8863526462', '8873238662', '9028100752', '9028100642', '9028099642', '9028096912', '8801176372', '9568711302', '8774698302', '8857919752', '9792097882', '9792099822', '9792108192', '9792110402', '9792122292', '9792089872', '9792117142', '9792117442', '9792118792', '9792127542', '9792151032', '9792163002', '9792163112', '9792139582', '9792145682', '9792150202', '9792150332', '9792153932', '9792160482', '9792162582', '8589955434', '8689778274', '8702980224', '8689824184', '8718701174', '8718659914', '8718647134', '8718694464', '8726444864', '8689817214', '8718690494', '8718690354', '8708343804', '8689812604', '8689778444', '8689777474', '8689782104', '8689814904', '8718633994', '8689838864', '8689783224', '8689816884', '8902100194', '8844919354', '8957699154', '9028097564', '9131523304', '8830442834', '9089757164', '9561294394', '9084162834', '9515951854', '9568711364', '8902092344', '8957770184', '9792105144', '9792112744', '9792118604', '9792119024', '9792121764', '9792122154', '9792107014', '9792166144', '9792123124', '9792129844', '9792132464', '9792135424', '9792135684', '9792151574', '9792163554', '9792128054', '9792131254', '9792132334', '9792136864', '9792139394', '9792142684', '9792143104', '9792147554', '9792147964', '9792150064', '9792165954', '9792166474'])

	def test_find_input_tags(self):
		pattern = '<input.*>'
		ids = find(pattern, self.files)
		self.assertCountEqual(ids, ['9028099348', '9028099198', '8692528280', '9028099030', '9568705600', '9028096493', '9028094623', '9028097193', '9028096323', '8692528039', '8590045589', '8692467149', '9028097049', '9028094089', '9028096709', '8692527785', '8692519565', '8692468295', '9028098875', '9028097905', '9028096155', '9028095395', '9121811175', '8692529646', '8589827366', '8589823186', '9028095226', '9028094796', '9028095986', '8817731517', '9028094967', '9028102497', '9028097387', '9028095097', '9028097737', '9028094287', '9028096912', '8589955434', '8692468134', '9028099524', '9028097564'])
	
if __name__ == "__main__":
	unittest.main()